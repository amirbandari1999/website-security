import React from 'react';
import './info.css';
import Navbar from '../Navbar';
import img from './img8.jpg';

export default function InsecureD() {
  return (
    <div>
    <img className='Text-img' src = {img} alt='Lock' />
    <Navbar/>
    <div className='Artical'>
    <article>
    <img className='Text-img' src = {img} alt='Lock' />
    <h1 className='debug-center'>Insecure Deserialization</h1>
    <p className='TextColor'>
    Insecure deserialization is a well-known but rare vulnerability in which an attacker inserts malicious objects into a web application. This gives them the ability to launch denial-of-service (DoS) attacks, remote code execution attacks, SQL injections, Path Traversal, and Authentication Bypasses.
Deserialization attacks are a serious threat with serious consequences for businesses and their customers. Potential flaws have been discovered in some of the most popular programming languages, including Java, Python,.NET, PHP, Node.js, and Ruby.
Serialization is the process of converting an object into a format that can be saved to a file or database or sent via streams or networks. This is a fundamental function that must be performed on a regular basis in order to store and transfer data. Objects are serialized differently in different programming languages, using either binary or string formats. Serialization transforms data into a byte stream after it has been preprocessed in a specific way. XML and JSON are two popular serialization formats.
Deserialization processes are the inverse of serialization processes. They entail serializing data from files, streams, or networks and converting it into an object. Deserialization essentially restores the byte stream to its original state before serialization.
When done securely, this conversion is a standard procedure. Insecure deserialization, in which malicious code is generated by unauthorized user input, should be avoided. This frequently occurs when an attacker uses the customizable deserialization processes provided by many programming languages to control them with untrusted input. Unfortunately, the languages assume the data is safe and treat all serialized data structures as validated, allowing malicious objects to be included.

      </p>
    </article>
    </div>
    </div>
  );
}